version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: paris_ap_staging
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - paris-ap-staging-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d paris_ap_staging"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_staging_data:/data
    ports:
      - "6379:6379"
    networks:
      - paris-ap-staging-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Service
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    restart: unless-stopped
    environment:
      NODE_ENV: staging
      DATABASE_URL: postgres://postgres:${DB_PASSWORD}@postgres:5432/paris_ap_staging
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # Microsoft Graph
      GRAPH_TENANT_ID: ${GRAPH_TENANT_ID}
      GRAPH_CLIENT_ID: ${GRAPH_CLIENT_ID}
      GRAPH_CLIENT_SECRET: ${GRAPH_CLIENT_SECRET}
      GRAPH_SHARED_MAILBOX: ${GRAPH_SHARED_MAILBOX}
      
      # SharePoint
      SP_SITE_ID: ${SP_SITE_ID}
      SP_DRIVE_ID: ${SP_DRIVE_ID}
      SP_PROCESSED_DIR: ${SP_PROCESSED_DIR}
      SP_RAW_DIR: ${SP_RAW_DIR}
      
      # ServiceTitan
      ST_BASE_URL: ${ST_BASE_URL}
      ST_CLIENT_ID: ${ST_CLIENT_ID}
      ST_CLIENT_SECRET: ${ST_CLIENT_SECRET}
      ST_TENANT_ID: ${ST_TENANT_ID}
      ST_BUSINESS_UNIT_ID: ${ST_BUSINESS_UNIT_ID}
      ST_SERVICE_STOCK_LOCATION_ID: ${ST_SERVICE_STOCK_LOCATION_ID}
      
      # Azure Document Intelligence
      AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT: ${AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT}
      AZURE_DOCUMENT_INTELLIGENCE_KEY: ${AZURE_DOCUMENT_INTELLIGENCE_KEY}
      AZURE_DOCUMENT_INTELLIGENCE_MODEL_ID: ${AZURE_DOCUMENT_INTELLIGENCE_MODEL_ID}
      
      # OpenAI
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_BASE_URL: ${OPENAI_BASE_URL}
      
      # App Settings
      VARIANCE_CENTS: ${VARIANCE_CENTS}
      DEDUPE_WINDOW_DAYS: ${DEDUPE_WINDOW_DAYS}
      DAILY_SUMMARY_HOUR_PT: ${DAILY_SUMMARY_HOUR_PT}
      RUN_SCHEDULE_CRON: ${RUN_SCHEDULE_CRON}
      
      # Teams & Email
      TEAMS_WEBHOOK_URL: ${TEAMS_WEBHOOK_URL}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_FROM: ${SMTP_FROM}
      NOTIFICATION_EMAILS: ${NOTIFICATION_EMAILS}
      
      # SharePoint URLs
      SP_BASE_URL: ${SP_BASE_URL}
      SP_SITE_PATH: ${SP_SITE_PATH}
      
      # Staging specific settings
      NOTIFY_ALL_SUCCESS: ${NOTIFY_ALL_SUCCESS}
      
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - paris-ap-staging-network
    volumes:
      - api_staging_logs:/app/logs

  # Workers Service (single replica for staging)
  workers:
    build:
      context: .
      dockerfile: apps/workers/Dockerfile
    restart: unless-stopped
    environment:
      NODE_ENV: staging
      DATABASE_URL: postgres://postgres:${DB_PASSWORD}@postgres:5432/paris_ap_staging
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # Same environment variables as API
      GRAPH_TENANT_ID: ${GRAPH_TENANT_ID}
      GRAPH_CLIENT_ID: ${GRAPH_CLIENT_ID}
      GRAPH_CLIENT_SECRET: ${GRAPH_CLIENT_SECRET}
      GRAPH_SHARED_MAILBOX: ${GRAPH_SHARED_MAILBOX}
      SP_SITE_ID: ${SP_SITE_ID}
      SP_DRIVE_ID: ${SP_DRIVE_ID}
      SP_PROCESSED_DIR: ${SP_PROCESSED_DIR}
      SP_RAW_DIR: ${SP_RAW_DIR}
      ST_BASE_URL: ${ST_BASE_URL}
      ST_CLIENT_ID: ${ST_CLIENT_ID}
      ST_CLIENT_SECRET: ${ST_CLIENT_SECRET}
      ST_TENANT_ID: ${ST_TENANT_ID}
      ST_BUSINESS_UNIT_ID: ${ST_BUSINESS_UNIT_ID}
      ST_SERVICE_STOCK_LOCATION_ID: ${ST_SERVICE_STOCK_LOCATION_ID}
      AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT: ${AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT}
      AZURE_DOCUMENT_INTELLIGENCE_KEY: ${AZURE_DOCUMENT_INTELLIGENCE_KEY}
      AZURE_DOCUMENT_INTELLIGENCE_MODEL_ID: ${AZURE_DOCUMENT_INTELLIGENCE_MODEL_ID}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_BASE_URL: ${OPENAI_BASE_URL}
      VARIANCE_CENTS: ${VARIANCE_CENTS}
      DEDUPE_WINDOW_DAYS: ${DEDUPE_WINDOW_DAYS}
      DAILY_SUMMARY_HOUR_PT: ${DAILY_SUMMARY_HOUR_PT}
      RUN_SCHEDULE_CRON: ${RUN_SCHEDULE_CRON}
      TEAMS_WEBHOOK_URL: ${TEAMS_WEBHOOK_URL}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_FROM: ${SMTP_FROM}
      NOTIFICATION_EMAILS: ${NOTIFICATION_EMAILS}
      SP_BASE_URL: ${SP_BASE_URL}
      SP_SITE_PATH: ${SP_SITE_PATH}
      NOTIFY_ALL_SUCCESS: ${NOTIFY_ALL_SUCCESS}
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - paris-ap-staging-network
    volumes:
      - worker_staging_logs:/app/logs

  # Admin UI
  admin:
    build:
      context: .
      dockerfile: apps/admin/Dockerfile
    restart: unless-stopped
    environment:
      NODE_ENV: staging
      API_BASE_URL: http://api:4000
      
      # NextAuth
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      
      # Azure AD
      AZURE_AD_CLIENT_ID: ${AZURE_AD_CLIENT_ID}
      AZURE_AD_CLIENT_SECRET: ${AZURE_AD_CLIENT_SECRET}
      AZURE_AD_TENANT_ID: ${AZURE_AD_TENANT_ID}
      
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - paris-ap-staging-network

  # Nginx Reverse Proxy (HTTP only for staging)
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx.staging.conf:/etc/nginx/nginx.conf:ro
      - nginx_staging_logs:/var/log/nginx
    depends_on:
      - api
      - admin
    networks:
      - paris-ap-staging-network

volumes:
  postgres_staging_data:
    driver: local
  redis_staging_data:
    driver: local
  api_staging_logs:
    driver: local
  worker_staging_logs:
    driver: local
  nginx_staging_logs:
    driver: local

networks:
  paris-ap-staging-network:
    driver: bridge